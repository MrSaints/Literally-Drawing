// Generated by CoffeeScript 1.6.3
(function() {
  var Whiteboard, _ref, _ref1,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.WB = (_ref = window.WB) != null ? _ref : {};

  WB.bindEvents = function(wb, stage, background) {
    var _this = this;
    background.on('mousedown touchstart', function(event) {
      return wb.begin(stage.getPointerPosition().x, stage.getPointerPosition().y);
    });
    stage.on('contentMousemove contentTouchmove', function() {
      return wb["continue"](stage.getPointerPosition().x, stage.getPointerPosition().y);
    });
    return stage.on('contentMouseup contentTouchend', function() {
      return wb.end(stage.getPointerPosition().x, stage.getPointerPosition().y);
    });
  };

  WB.bindDrawingEvents = function(wb, object) {
    var _this = this;
    object.on('mouseover mouseenter', function() {
      return document.body.style.cursor = 'pointer';
    });
    return object.on('mouseout mouseleave', function() {
      return document.body.style.cursor = 'default';
    });
  };

  WB.Core = (function() {
    function Core() {
      this.lastAction = void 0;
      this.isDrawing = false;
      this.tool = new WB.Pencil;
      this.stage = this._createStage();
      this.layer = this._createLayer();
      this.background = this._createBackground(this.stage.getWidth(), this.stage.getHeight());
      this.layer.add(this.background);
      this.stage.add(this.layer);
      WB.bindEvents(this, this.stage, this.background);
    }

    Core.prototype.begin = function(x, y) {
      this.tool.begin(x, y, this);
      return this.isDrawing = true;
    };

    Core.prototype["continue"] = function(x, y) {
      if (!this.isDrawing) {
        return false;
      }
      return this.tool["continue"](x, y, this);
    };

    Core.prototype.end = function(x, y) {
      if (!this.isDrawing) {
        return false;
      }
      this.tool.end(x, y, this);
      return this.isDrawing = false;
    };

    Core.prototype._createStage = function() {
      return new Kinetic.Stage({
        container: 'js-whiteboard',
        width: $(window).width(),
        height: $(window).height()
      });
    };

    Core.prototype._createLayer = function() {
      return new Kinetic.Layer;
    };

    Core.prototype._createBackground = function(width, height) {
      return new Kinetic.Rect({
        width: width,
        height: height
      });
    };

    Core.prototype.undo = function() {
      this.lastAction = this.layer.getChildren()[this.layer.getChildren().length - 1];
      return this.lastAction.remove();
    };

    Core.prototype.redo = function() {
      if (this.lastAction != null) {
        this.layer.add(this.lastAction);
      }
      return this.lastAction = void 0;
    };

    Core.prototype.getSnapshot = function() {
      return this.stage.toJSON();
    };

    Core.prototype.loadSnapshot = function(json) {
      return Kinetic.Node.create(json, 'js-whiteboard');
    };

    return Core;

  })();

  WB.Tool = (function() {
    function Tool() {}

    Tool.prototype.begin = function(x, y, wb) {};

    Tool.prototype["continue"] = function(x, y, wb) {};

    Tool.prototype.end = function(x, y, wb) {};

    return Tool;

  })();

  WB.Pencil = (function(_super) {
    __extends(Pencil, _super);

    function Pencil() {
      _ref1 = Pencil.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    Pencil.prototype.begin = function(x, y, wb) {
      this.instance = this._init();
      this.instance.setPoints([
        {
          x: x,
          y: y
        }
      ]);
      return wb.layer.add(this.instance);
    };

    Pencil.prototype["continue"] = function(x, y, wb) {
      this.instance.addPoint({
        x: x,
        y: y
      });
      return wb.layer.batchDraw();
    };

    Pencil.prototype.end = function(x, y, wb) {
      WB.bindDrawingEvents(wb, this.instance);
      return this.instance = void 0;
    };

    Pencil.prototype._init = function() {
      return new Kinetic.Spline({
        stroke: 'black',
        lineCap: 'round',
        draggable: true,
        tension: 0
      });
    };

    return Pencil;

  })(WB.Tool);

  Whiteboard = new WB.Core;

  TogetherJS.hub.on('togetherjs.hello', function() {
    return TogetherJS.send({
      type: 'init',
      image: Whiteboard.getSnapshot()
    });
  });

  TogetherJS.hub.on('init', function(data) {
    return Whiteboard.loadSnapshot(data.image);
  });

}).call(this);
