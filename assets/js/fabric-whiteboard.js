// Generated by CoffeeScript 1.6.3
(function() {
  var Whiteboard, _ref;

  window.WB = (_ref = window.WB) != null ? _ref : {};

  WB.Collaborate = function(wb, canvas) {
    var _this = this;
    this.TJS = TogetherJS;
    this.client = [];
    this.isDrawing = false;
    this.TJS.on('ready', function() {
      canvas.on('mouse:down', function(data) {
        if (!canvas.isDrawingMode) {
          return;
        }
        _this.isDrawing = true;
        return TogetherJS.send({
          type: 'drawStart',
          point: canvas.getPointer(data.e)
        });
      });
      canvas.on('mouse:move', function(data) {
        if (!_this.isDrawing) {
          return;
        }
        return TogetherJS.send({
          type: 'drawContinue',
          point: canvas.getPointer(data.e)
        });
      });
      canvas.on('mouse:up', function(data) {
        if (!_this.isDrawing) {
          return;
        }
        _this.isDrawing = false;
        return TogetherJS.send({
          type: 'drawEnd'
        });
      });
      _this.modifyObject = function(data) {
        return TogetherJS.send({
          type: 'objectModified',
          id: canvas.getObjects().indexOf(data.target),
          properties: {
            angle: data.target.getAngle(),
            left: data.target.getLeft(),
            top: data.target.getTop(),
            scale: data.target.getScaleX()
          }
        });
      };
      canvas.on({
        'object:moving': _this.modifyObject,
        'object:scaling': _this.modifyObject,
        'object:resizing': _this.modifyObject,
        'object:rotating': _this.modifyObject
      });
      return canvas.on('selection:created', function(data) {});
    });
    this.TJS.on('close', function() {
      return canvas.off({
        'mouse:down': 'mouse:down',
        'mouse:move': 'mouse:move',
        'mouse:up': 'mouse:up',
        'object:moving': 'object:moving',
        'object:scaling': 'object:scaling',
        'object:resizing': 'object:resizing',
        'object:rotating': 'object:rotating'
      });
    });
    this.TJS.hub.on('togetherjs.hello', function() {
      return TogetherJS.send({
        type: 'init',
        data: wb.getSnapshot()
      });
    });
    this.TJS.hub.on('init', function(snapshot) {
      return wb.loadSnapshot(snapshot.data);
    });
    this.TJS.hub.on('drawStart', function(data) {
      var _base, _name;
      if ((_base = _this.client)[_name = data.clientId] == null) {
        _base[_name] = new fabric['PencilBrush'](canvas);
      }
      return _this.client[data.clientId].onMouseDown(data.point);
    });
    this.TJS.hub.on('drawContinue', function(data) {
      return _this.client[data.clientId].onMouseMove(data.point);
    });
    this.TJS.hub.on('drawEnd', function(data) {
      return _this.client[data.clientId].onMouseUp();
    });
    return this.TJS.hub.on('objectModified', function(data) {
      var prop;
      prop = data.properties;
      canvas.item(data.id).setAngle(prop.angle).setLeft(prop.left).setTop(prop.top).scale(prop.scale).setCoords();
      return canvas.renderAll();
    });
  };

  WB.Core = (function() {
    function Core(id, callback) {
      this.id = id;
      this.callback = callback;
      this.canvas = this._createCanvas(this.id);
      this._resizeCanvas($(window).outerWidth(), $(window).outerHeight());
      this.callback(this, this.canvas);
    }

    Core.prototype._createCanvas = function(id) {
      return new fabric.Canvas(id);
    };

    Core.prototype._resizeCanvas = function(width, height) {
      this.canvas.setHeight(height);
      return this.canvas.setWidth(width);
    };

    Core.prototype.setTool = function(type) {
      this.tool = type;
      switch (this.tool) {
        case 'pencil':
          return this.canvas.isDrawingMode = true;
        default:
          return this.canvas.isDrawingMode = false;
      }
    };

    Core.prototype.getSnapshot = function() {
      return JSON.stringify(this.canvas);
    };

    Core.prototype.loadSnapshot = function(data) {
      return this.canvas.loadFromJSON(data, this.canvas.renderAll.bind(this.canvas));
    };

    return Core;

  })();

  Whiteboard = new WB.Core('js-whiteboard', WB.Collaborate);

  (function($) {
    return $('li[data-tool]').click(function() {
      $(this).parent().find('li').removeClass('active');
      $(this).toggleClass('active');
      return Whiteboard.setTool($(this).data('tool'));
    });
  })(jQuery);

}).call(this);
