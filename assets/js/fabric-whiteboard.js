// Generated by CoffeeScript 1.6.3
(function() {
  var Whiteboard, _ref;

  window.WB = (_ref = window.WB) != null ? _ref : {};

  WB.Collaborate = function(wb, canvas) {
    var _this = this;
    this.TJS = TogetherJS;
    this.tool = new fabric['PencilBrush'](canvas);
    this.isDrawing = false;
    this.broadcastObject = function(data) {};
    canvas.on({
      'object:moving': this.broadcastObject,
      'object:scaling': this.broadcastObject,
      'object:resizing': this.broadcastObject,
      'object:rotating': this.broadcastObject
    });
    this.TJS.on('ready', function() {
      canvas.on('mouse:down', function(data) {
        if (!canvas.isDrawingMode) {
          return;
        }
        _this.isDrawing = true;
        return TogetherJS.send({
          type: 'drawStart',
          point: canvas.getPointer(data.e)
        });
      });
      canvas.on('mouse:move', function(data) {
        if (!_this.isDrawing) {
          return;
        }
        return TogetherJS.send({
          type: 'drawContinue',
          point: canvas.getPointer(data.e)
        });
      });
      return canvas.on('mouse:up', function(data) {
        if (!_this.isDrawing) {
          return;
        }
        _this.isDrawing = false;
        return TogetherJS.send({
          type: 'drawEnd'
        });
      });
    });
    this.TJS.hub.on('togetherjs.hello', function() {
      return TogetherJS.send({
        type: 'init',
        data: wb.getSnapshot()
      });
    });
    this.TJS.hub.on('init', function(snapshot) {
      return wb.loadSnapshot(snapshot.data);
    });
    this.TJS.hub.on('drawStart', function(data) {
      return _this.tool.onMouseDown(data.point);
    });
    this.TJS.hub.on('drawContinue', function(data) {
      return _this.tool.onMouseMove(data.point);
    });
    return this.TJS.hub.on('drawEnd', function() {
      return _this.tool.onMouseUp();
    });
  };

  WB.Core = (function() {
    function Core(id, callback) {
      this.id = id;
      this.callback = callback;
      this.canvas = this._createCanvas(this.id);
      this._resizeCanvas($(window).outerWidth(), $(window).outerHeight());
      this.callback(this, this.canvas);
    }

    Core.prototype._createCanvas = function(id) {
      return new fabric.Canvas(id);
    };

    Core.prototype._resizeCanvas = function(width, height) {
      this.canvas.setHeight(height);
      return this.canvas.setWidth(width);
    };

    Core.prototype.setTool = function(type) {
      this.tool = type;
      switch (this.tool) {
        case 'pencil':
          return this.canvas.isDrawingMode = true;
        default:
          return this.canvas.isDrawingMode = false;
      }
    };

    Core.prototype.getSnapshot = function() {
      return JSON.stringify(this.canvas);
    };

    Core.prototype.loadSnapshot = function(data) {
      return this.canvas.loadFromJSON(data, this.canvas.renderAll.bind(this.canvas));
    };

    return Core;

  })();

  Whiteboard = new WB.Core('js-whiteboard', WB.Collaborate);

  (function($) {
    return $('li[data-tool]').click(function() {
      $(this).parent().find('li').removeClass('active');
      $(this).toggleClass('active');
      return Whiteboard.setTool($(this).data('tool'));
    });
  })(jQuery);

}).call(this);
